// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    refresh_token_expires_in Int?
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime?    @default(now())
    rating        Int?         @default(1200)
    gameToUsers   GameToUser[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum PlayerColor {
    WHITE
    BLACK
}

model GameToUser {
    id            String      @id @default(cuid())
    userId        String
    currentRating Int         @default(1200)
    user          User        @relation(fields: [userId], references: [id])
    gameId        Int
    game          Game        @relation(fields: [gameId], references: [id])
    color         PlayerColor

    @@index([gameId])
    @@index([userId])
}

enum Winner {
    WHITE
    BLACK
    DRAW
}

enum TimeControl {
    BULLET //1min
    BULLET_INCREMENT //1min+1sec
    LONG_BULLET_INCREMENT //2min+1sec
    BLITZ //3min
    BLITZ_INCREMENT //3min+2sec
}

model Game {
    id          Int          @id @default(autoincrement())
    gameToUsers GameToUser[]
    result      Winner
    moves       String
    timeControl TimeControl  @default(BLITZ)
    finishedAt  DateTime?    @default(now())
}
